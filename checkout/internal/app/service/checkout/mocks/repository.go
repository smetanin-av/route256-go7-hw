// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "route256/checkout/internal/app/domain"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddCartItem provides a mock function with given fields: ctx, change
func (_m *Repository) AddCartItem(ctx context.Context, change *domain.UpdateCart) error {
	ret := _m.Called(ctx, change)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UpdateCart) error); ok {
		r0 = rf(ctx, change)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClearCart provides a mock function with given fields: ctx, userID
func (_m *Repository) ClearCart(ctx context.Context, userID int64) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountOfSKU provides a mock function with given fields: ctx, userID, sku
func (_m *Repository) CountOfSKU(ctx context.Context, userID int64, sku uint32) (uint16, error) {
	ret := _m.Called(ctx, userID, sku)

	var r0 uint16
	if rf, ok := ret.Get(0).(func(context.Context, int64, uint32) uint16); ok {
		r0 = rf(ctx, userID, sku)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, uint32) error); ok {
		r1 = rf(ctx, userID, sku)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecreaseCount provides a mock function with given fields: ctx, change
func (_m *Repository) DecreaseCount(ctx context.Context, change *domain.UpdateCart) error {
	ret := _m.Called(ctx, change)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UpdateCart) error); ok {
		r0 = rf(ctx, change)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCartItem provides a mock function with given fields: ctx, userID, sku
func (_m *Repository) DeleteCartItem(ctx context.Context, userID int64, sku uint32) error {
	ret := _m.Called(ctx, userID, sku)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, uint32) error); ok {
		r0 = rf(ctx, userID, sku)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetItemsInCart provides a mock function with given fields: ctx, userID
func (_m *Repository) GetItemsInCart(ctx context.Context, userID int64) ([]*domain.OrderItem, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*domain.OrderItem
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*domain.OrderItem); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.OrderItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
