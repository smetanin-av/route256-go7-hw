// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "route256/checkout/internal/app/domain"

	mock "github.com/stretchr/testify/mock"
)

// ProductClient is an autogenerated mock type for the ProductClient type
type ProductClient struct {
	mock.Mock
}

// GetProduct provides a mock function with given fields: ctx, sku
func (_m *ProductClient) GetProduct(ctx context.Context, sku uint32) (*domain.ProductInfo, error) {
	ret := _m.Called(ctx, sku)

	var r0 *domain.ProductInfo
	if rf, ok := ret.Get(0).(func(context.Context, uint32) *domain.ProductInfo); ok {
		r0 = rf(ctx, sku)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, sku)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSkus provides a mock function with given fields: ctx, afterSku, count
func (_m *ProductClient) ListSkus(ctx context.Context, afterSku uint32, count uint32) ([]uint32, error) {
	ret := _m.Called(ctx, afterSku, count)

	var r0 []uint32
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) []uint32); ok {
		r0 = rf(ctx, afterSku, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint32)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(ctx, afterSku, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductClient creates a new instance of ProductClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductClient(t mockConstructorTestingTNewProductClient) *ProductClient {
	mock := &ProductClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
