// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "route256/checkout/internal/app/domain"

	mock "github.com/stretchr/testify/mock"
)

// LomsClient is an autogenerated mock type for the LomsClient type
type LomsClient struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, mdl
func (_m *LomsClient) CreateOrder(ctx context.Context, mdl *domain.OrderInfo) (int64, error) {
	ret := _m.Called(ctx, mdl)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *domain.OrderInfo) int64); ok {
		r0 = rf(ctx, mdl)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.OrderInfo) error); ok {
		r1 = rf(ctx, mdl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStocks provides a mock function with given fields: ctx, sku
func (_m *LomsClient) GetStocks(ctx context.Context, sku uint32) ([]domain.StockInfo, error) {
	ret := _m.Called(ctx, sku)

	var r0 []domain.StockInfo
	if rf, ok := ret.Get(0).(func(context.Context, uint32) []domain.StockInfo); ok {
		r0 = rf(ctx, sku)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.StockInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, sku)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLomsClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewLomsClient creates a new instance of LomsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLomsClient(t mockConstructorTestingTNewLomsClient) *LomsClient {
	mock := &LomsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
