// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: loms/v1/loms.proto

package loms_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateOrderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUser() <= 0 {
		return CreateOrderRequestValidationError{
			field:  "User",
			reason: "value must be greater than 0",
		}
	}

	if len(m.GetItems()) < 1 {
		return CreateOrderRequestValidationError{
			field:  "Items",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOrderRequestValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CreateOrderRequestValidationError is the validation error returned by
// CreateOrderRequest.Validate if the designated constraints aren't met.
type CreateOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderRequestValidationError) ErrorName() string {
	return "CreateOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderRequestValidationError{}

// Validate checks the field values on CreateOrderRequestItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateOrderRequestItem) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSku() <= 0 {
		return CreateOrderRequestItemValidationError{
			field:  "Sku",
			reason: "value must be greater than 0",
		}
	}

	if val := m.GetCount(); val <= 0 || val >= 65535 {
		return CreateOrderRequestItemValidationError{
			field:  "Count",
			reason: "value must be inside range (0, 65535)",
		}
	}

	return nil
}

// CreateOrderRequestItemValidationError is the validation error returned by
// CreateOrderRequestItem.Validate if the designated constraints aren't met.
type CreateOrderRequestItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderRequestItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderRequestItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderRequestItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderRequestItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderRequestItemValidationError) ErrorName() string {
	return "CreateOrderRequestItemValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderRequestItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderRequestItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderRequestItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderRequestItemValidationError{}

// Validate checks the field values on CreateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateOrderResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OrderId

	return nil
}

// CreateOrderResponseValidationError is the validation error returned by
// CreateOrderResponse.Validate if the designated constraints aren't met.
type CreateOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderResponseValidationError) ErrorName() string {
	return "CreateOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderResponseValidationError{}

// Validate checks the field values on ListOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListOrderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOrderId() <= 0 {
		return ListOrderRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// ListOrderRequestValidationError is the validation error returned by
// ListOrderRequest.Validate if the designated constraints aren't met.
type ListOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrderRequestValidationError) ErrorName() string { return "ListOrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrderRequestValidationError{}

// Validate checks the field values on ListOrderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListOrderResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for User

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrderResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListOrderResponseValidationError is the validation error returned by
// ListOrderResponse.Validate if the designated constraints aren't met.
type ListOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrderResponseValidationError) ErrorName() string {
	return "ListOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrderResponseValidationError{}

// Validate checks the field values on ListOrderResponseItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOrderResponseItem) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSku() <= 0 {
		return ListOrderResponseItemValidationError{
			field:  "Sku",
			reason: "value must be greater than 0",
		}
	}

	if val := m.GetCount(); val <= 0 || val >= 65535 {
		return ListOrderResponseItemValidationError{
			field:  "Count",
			reason: "value must be inside range (0, 65535)",
		}
	}

	return nil
}

// ListOrderResponseItemValidationError is the validation error returned by
// ListOrderResponseItem.Validate if the designated constraints aren't met.
type ListOrderResponseItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrderResponseItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrderResponseItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrderResponseItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrderResponseItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrderResponseItemValidationError) ErrorName() string {
	return "ListOrderResponseItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrderResponseItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrderResponseItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrderResponseItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrderResponseItemValidationError{}

// Validate checks the field values on OrderPayedRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *OrderPayedRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOrderId() <= 0 {
		return OrderPayedRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// OrderPayedRequestValidationError is the validation error returned by
// OrderPayedRequest.Validate if the designated constraints aren't met.
type OrderPayedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderPayedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderPayedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderPayedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderPayedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderPayedRequestValidationError) ErrorName() string {
	return "OrderPayedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrderPayedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderPayedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderPayedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderPayedRequestValidationError{}

// Validate checks the field values on OrderPayedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OrderPayedResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// OrderPayedResponseValidationError is the validation error returned by
// OrderPayedResponse.Validate if the designated constraints aren't met.
type OrderPayedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderPayedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderPayedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderPayedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderPayedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderPayedResponseValidationError) ErrorName() string {
	return "OrderPayedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrderPayedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderPayedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderPayedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderPayedResponseValidationError{}

// Validate checks the field values on CancelOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelOrderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOrderId() <= 0 {
		return CancelOrderRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// CancelOrderRequestValidationError is the validation error returned by
// CancelOrderRequest.Validate if the designated constraints aren't met.
type CancelOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelOrderRequestValidationError) ErrorName() string {
	return "CancelOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelOrderRequestValidationError{}

// Validate checks the field values on CancelOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelOrderResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CancelOrderResponseValidationError is the validation error returned by
// CancelOrderResponse.Validate if the designated constraints aren't met.
type CancelOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelOrderResponseValidationError) ErrorName() string {
	return "CancelOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelOrderResponseValidationError{}

// Validate checks the field values on GetStocksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetStocksRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSku() <= 0 {
		return GetStocksRequestValidationError{
			field:  "Sku",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// GetStocksRequestValidationError is the validation error returned by
// GetStocksRequest.Validate if the designated constraints aren't met.
type GetStocksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStocksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStocksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStocksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStocksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStocksRequestValidationError) ErrorName() string { return "GetStocksRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStocksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStocksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStocksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStocksRequestValidationError{}

// Validate checks the field values on GetStocksResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetStocksResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetStocks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStocksResponseValidationError{
					field:  fmt.Sprintf("Stocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetStocksResponseValidationError is the validation error returned by
// GetStocksResponse.Validate if the designated constraints aren't met.
type GetStocksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStocksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStocksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStocksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStocksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStocksResponseValidationError) ErrorName() string {
	return "GetStocksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStocksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStocksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStocksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStocksResponseValidationError{}

// Validate checks the field values on GetStocksResponseItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetStocksResponseItem) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WarehouseId

	// no validation rules for Count

	return nil
}

// GetStocksResponseItemValidationError is the validation error returned by
// GetStocksResponseItem.Validate if the designated constraints aren't met.
type GetStocksResponseItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStocksResponseItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStocksResponseItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStocksResponseItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStocksResponseItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStocksResponseItemValidationError) ErrorName() string {
	return "GetStocksResponseItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetStocksResponseItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStocksResponseItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStocksResponseItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStocksResponseItemValidationError{}
